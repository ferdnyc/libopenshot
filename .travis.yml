language: cpp

# This section uses a rather esoteric (and tricky!) feature of YAML,
# &aliases and *anchors, to build package lists out of sublists without
# repeating their contents. Basically, '&name' creates an alias for the
# given data, which can then be referenced using the anchor '*name'.
addons:
  apt:
    packages: &p_common  # Packages common to all Ubuntu builds
    - cmake
    - libasound2-dev
    - libopenshot-audio-dev
    - libzmq3-dev
    - qtbase5-dev
    - qtmultimedia5-dev
    - libfdk-aac-dev
    - libavcodec-dev
    - libavformat-dev
    - libavdevice-dev
    - libavutil-dev
    - libavfilter-dev
    - libswscale-dev
    - libpostproc-dev
    - libswresample-dev
    - libmagick++-dev
    - libunittest++-dev
    - swig
    - doxygen
    - graphviz
    - curl

jobs:
  include:
    - name: "Coverage + FFmpeg 3.4 GCC (Ubuntu 18.04 Bionic)"
      env:
        - BUILD_VERSION=coverage_ffmpeg34
        - CMAKE_EXTRA_ARGS="-DENABLE_COVERAGE=1"
        - TEST_TARGET=coverage
      os: linux
      dist: bionic
      addons:
        apt:
          sources:
          - sourceline: 'ppa:openshot.developers/libopenshot-daily'
          packages:
          - *p_common
          - qt5-default
          - libavresample-dev
          - libjsoncpp-dev
          - lcov
          - binutils-common # For c++filt

    - name: "FFmpeg 4 GCC (Ubuntu 20.04 Focal)"
      env:
        - BUILD_VERSION=ffmpeg4
        - CMAKE_EXTRA_ARGS=""
        - TEST_TARGET=test
      os: linux
      dist: focal
      addons:
        apt:
          sources:
          - sourceline: 'ppa:openshot.developers/libopenshot-daily'
          packages:
          - *p_common
          - qt5-default
          - libjsoncpp-dev
          - libavcodec58
          - libavformat58
          - libavdevice58
          - libavutil56
          - libavfilter7
          - libswscale5
          - libpostproc55
          - libswresample3

    - name: FFmpeg 3.4 Clang (Ubuntu 18.04 Bionic)
      env:
        - BUILD_VERSION=clang_ffmpeg34
        - CMAKE_EXTRA_ARGS=""
        - TEST_TARGET=test
      os: linux
      dist: bionic
      compiler: clang
      addons:
        apt:
          sources:
          - sourceline: 'ppa:openshot.developers/libopenshot-daily'
          packages:
          - *p_common
          - qt5-default
          - libavresample-dev
          - libomp-dev

    - name: "FFmpeg 2 GCC (Ubuntu 16.04 Xenial)"
      env:
        - BUILD_VERSION=ffmpeg2
        - CMAKE_EXTRA_ARGS=""
        - TEST_TARGET="os_test"
      os: linux
      dist: xenial
      addons:
        apt:
          sources:
          - sourceline: 'ppa:openshot.developers/libopenshot-daily'
          - sourceline: 'ppa:beineri/opt-qt-5.10.0-xenial'
          packages:
          - *p_common
          - libavresample-dev
    
    - name: macOS Latest
      env:
      - BUILD_VERSION=ffmpeg4
      - TEST_TARGET="test"
      - CMAKE_EXTRA_ARGS="-DENABLE_RUBY=0"
      - Qt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5
      os: osx
      osx_image: xcode11.3
      compiler: clang
      addons:
        homebrew:
          update: true
          packages:
          - cmake
          - libomp
          - qt
          - imagemagick
          - libvpx
          - x264
          - x265
          - fdk-aac
          - fdk-aac-encoder
          - ffmpeg
          - zeromq
          - swig
          - unittest-cpp
          - rust

before_script:
  - mkdir -p  build
  - if [ "x${TRAVIS_OS_NAME}" = "xosx" ]; then eval $(brew --env|grep -i cmake); fi
  - if [ "x${TRAVIS_OS_NAME}" = "xosx" ]; then git clone https://github.com/OpenShot/libopenshot-audio; pushd libopenshot-audio; cmake -DCMAKE_BUILD_TYPE=Debug $(brew diy --name libopenshot-audio --version 0.2.0) .; cmake --build . -- VERBOSE=1; cmake --build . --target install; brew link --verbose libopenshot-audio; popd; fi
  - if [ "x${TRAVIS_OS_NAME}" = "xosx" ]; then git clone https://github.com/zeromq/cppzmq; pushd cppzmq; cmake $(brew diy --verbose --name cppzmq --version $(sh ./version.sh)) -DCMAKE_BUILD_TYPE=Debug -DENABLE_DRAFTS=0 .; cmake --build .; cmake --build . --target install; brew link --verbose cppzmq; popd; fi

script:
  - pushd build
  - if [ "x${TRAVIS_OS_NAME}" = "xosx" ]; then echo "${CMAKE_EXTRA_ARGS}"; fi
  - cmake -DCMAKE_INSTALL_PREFIX:PATH="$TRAVIS_OS_NAME-x64" -DCMAKE_BUILD_TYPE=Debug ${CMAKE_EXTRA_ARGS} ..
  - cmake --build . -- VERBOSE=1
  - cmake --build . --target ${TEST_TARGET} -- VERBOSE=1
  - cmake --build . --target install -- VERBOSE=1
  - cd ..

after_success:
  - if [ "x$TEST_TARGET" = "xcoverage" ]; then bash <(curl -s https://codecov.io/bash) -f build/coverage.info || echo "Codecov did not collect coverage reports"; fi

after_failure:
  - cat build/CMakeCache.txt
  - if [ "x${TRAVIS_OS_NAME}" = "xosx" ]; then brew config; brew doctor; fi

