name: 'ci-build-and-release'
on:
  push:
    branches:
      - ci-artifacts
  pull_request:
    branches:
      - develop
      - ci-artifacts

jobs:
  build:
    runs-on: ${{ matrix.os }}
      # continue-on-error: true
    strategy:
      # This should be a subset of the OpenShotAudio matrix, but a
      # SUPERset of the 'release' job matrix below.
      # This ensures there are no failures due to missing builds.
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          # Windows clang isn't being our friend
          - os: windows-latest
            compiler: clang
    env:
      CC: ${{ matrix.compiler }}
    steps:
      - name: Check out source branch
        uses: actions/checkout@v2

      - name: Get latest OpenShotAudio
        uses: robinraju/release-downloader@v1
        with:
          repository: ferdnyc/libopenshot-audio
          tag: 'ci_latest'
          fileName: 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}.zip'
          out-file-path: '${{ github.workspace }}'

      - name: Windows dependencies
        uses: msys2/setup-msys2@v2
        if: ${{ runner.os == 'windows' }}
        with:
          release: false
          update: false
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-qt5
            mingw-w64-x86_64-ffmpeg
            mingw-w64-x86_64-zeromq
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-swig
          # doxygen
          # mingw-w64-x86_64-graphviz

      - name: macOS dependencies
        if: ${{ runner.os == 'macos' }}
        run: |
          brew install qt5 ffmpeg zeromq libomp
          brew install python3 swig unittest-cpp
          brew install doxygen graphviz

      - name: Install Linux dependencies
        if: ${{ runner.os == 'linux' }}
        run: >-
          sudo apt update;
          sudo apt install cmake swig curl lcov libasound2-dev
          qtbase5-dev qtbase5-dev-tools libzmq3-dev
          libfdk-aac-dev libavcodec-dev libavformat-dev libavutil-dev
          libswscale-dev libswresample-dev libmagick++-dev
          libunittest++-dev doxygen graphviz

      - name: Extract OpenShotAudio (Unix)
        if: ${{ runner.os != 'windows' }}
        run: unzip 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}.zip'

      - name: Extract OpenShotAudio (Windows)
        if: ${{ runner.os == 'windows' }}
        shell: msys2 {0}
        run: unzip 'OpenShotAudio-${{ matrix.os }}-${{ matrix.compiler }}.zip'

      - name: Enable coverage scanning on Linux Clang builds
        if: ${{ runner.os == 'linux' }}
        uses: haya14busa/action-cond@v1
        id: coverage
        with:
          cond: ${{ matrix.compiler == 'clang' }}
          if_true: -DENABLE_COVERAGE:BOOL=1

      - name: Build (Unix)
        if: ${{ runner.os != 'windows' }}
        run: |
          # Vendored CPPZMQ is a temporary measure, homebrew zeromq is broken
          if [ "x${{ runner.os }}" == "xmacOS" ]; then export PATH="/usr/local/opt/qt/bin:$PATH"; export EXTRA_CMAKE_ARGS="-DENABLE_RUBY=0 -DUSE_VENDORED_CPPZMQ=1"; fi
          cmake -B build -S . -DCMAKE_INSTALL_PREFIX:PATH="${{ github.workspace }}/dist" -DOpenShotAudio_ROOT:PATH="${{ github.workspace }}/dist/" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE:BOOL=1 ${{ steps.coverage.outputs.value }} ${EXTRA_CMAKE_ARGS}
          cmake --build build
          cmake --build build --target os_test
          cmake --build build --target libopenshot-doc
          cmake --install build
          zip -rm libopenshot.zip dist

      - name: Build (Windows)
        if: ${{ runner.os == 'windows' }}
        shell: msys2 {0}
        run: |
          cmake -B build -S . -G "MinGW Makefiles" "-DCMAKE_INSTALL_PREFIX:PATH=${{ github.workspace }}/dist" "-DOpenShotAudio_ROOT:PATH=${{ github.workspace }}/dist/" "-DCMAKE_BUILD_TYPE=Debug" "-DCMAKE_VERBOSE_MAKEFILE:BOOL=1" ${{ steps.coverage.outputs.value }}
          cmake --build build
          cmake --install build
          zip -rm "libopenshot.zip" "dist"

      - name: Upload coverage data to Codecov
        uses: codecov/codecov-action@v1
        if: ${{ runner.os == 'linux' && matrix.compiler == 'clang' }}
        with:
          file: build/coverage.info

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'OpenShotLib-${{ matrix.os }}-${{ matrix.compiler }}'
          path: '${{ github.workspace }}/libopenshot.zip'

  release:
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
        # actions-recreate-release needs access to .git/refs/tags
      - name: Check out branch
        uses: actions/checkout@v2
      - name: Recreate latest CI release
        id: create_release
        uses: GongT/actions-recreate-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ci_latest
          release_name: Continuous Integration - latest builds
          body: Snapshot of ${{ github.ref }}.
          draft: false
          prerelease: true

  upload:
    runs-on: ${{ matrix.os }}
    needs: [build, release]
    strategy:
      matrix:
        # Subset of both the 'build' matrix above, and the OpenShotAudio
        # build matrix
        os: [ubuntu-20.04, macos-latest, windows-latest]
        compiler: [gcc, clang]
        exclude:
          # Windows clang isn't being our friend
          - os: windows-latest
            compiler: clang
    steps:
      - name: Download our artifact
        uses: actions/download-artifact@v2
        with:
          name: 'OpenShotLib-${{ matrix.os }}-${{ matrix.compiler }}'
          path: '${{ github.workspace }}'

      - name: Add files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: libopenshot.zip
          asset_name: 'OpenShotLib-${{ matrix.os }}-${{ matrix.compiler }}.zip'
          asset_content_type: application/zip
