name: 'libopenshot-ci'
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]
        compiler: [gcc, clang]
    env:
      CC: ${{ matrix.compiler }}
    steps:
    - name: Check out source branch
      uses: actions/checkout@v2

    - name: Download latest artifact from a github workflow
      uses: benday-inc/download-latest-artifact@v1.0.1
      with:
        token: ${{ secrets.CROSS_REPO_TOKEN }}
        repository_owner: 'ferdnyc'
        repository_name: 'libopenshot-audio'
        workflow_name: 'libopenshot-audio-ci'
        branch_name: 'develop'
        download_path: '${{ github.workspace }}/extern'
        download_filename: 'libopenshot-audio-${{ matrix.os }}.zip'

    - name: Enable coverage scanning on Clang builds
      uses: haya14busa/action-cond@v1
      id: coverage
      with:
        cond: ${{ matrix.compiler == 'clang' }}
        if_true: "-DENABLE_COVERAGE:BOOL=1"
        if_false: "-DENABLE_COVERAGE:BOOL=0"

    - name: Install Linux dependencies
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        sudo apt update
        sudo apt install cmake swig doxygen graphviz curl lcov
        sudo apt install qtbase5-dev qtbase5-dev-tools
        sudo apt install libfdk-aac-dev libavcodec-dev libavformat-dev libavdevice-dev libavutil-dev libavfilter-dev libswscale-dev libpostproc-dev libswresample-dev
        sudo apt install libzmq3-dev libmagick++-dev libunittest++-dev

    - name: Install macOS dependencies
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        brew update
        brew install swig unittest-cpp doxygen

    - name: Install Windows dependencies
      uses: msys2/setup-msys2@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        update: true
        install: >-
          mingw-w64-x86_64-${{ matrix.compiler }}
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-qt5
          mingw-w64-x86_64-ffmpeg
          mingw-w64-x86_64-zeromq
          mingw-w64-x86_64-swig

    - name: Build libopenshot
      shell: bash
      run: |
        if [ -d extern ]; then
          pushd extern
          unzip "libopenshot-audio-${{ matrix.os }}.zip"
          popd
        fi
        mkdir build
        pushd build
        cmake -B . -S .. -DCMAKE_INSTALL_PREFIX:PATH="dist" \
              -DOpenShotAudio_ROOT=../extern -DCMAKE_BUILD_TYPE="Debug" \
              "${{ steps.coverage.outputs.value }}"
        cmake --build . -- VERBOSE=1
        popd

    - name: Test libopenshot
      shell: bash
      run: |
        pushd build
        cmake --build . --target os_test -- VERBOSE=1
        popd

    - name: Install libopenshot
      shell: bash
      run: |
        pushd build
        cmake --build . --target install -- VERBOSE=1
        popd

    - uses: codecov/codecov-action@v1
      if: ${{ matrix.compiler == 'clang' }}
      with:
        file: build/coverage.info

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: 'libopenshot-${{ matrix.os }}-${{ matrix.compiler }}'
        path: '${{ github.workspace }}/build/dist'
